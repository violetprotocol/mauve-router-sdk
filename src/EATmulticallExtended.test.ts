import { EATMulticallExtended } from './EATmulticallExtended'

// Create fake signature for encoding
const v = 1
const r = '0xf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb'
const s = '0xf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb'
const expiry = 2

describe('EATMulticallExtended', () => {
  describe('encodePresignMulticallExtended', () => {
    it('works with no validation', () => {
      const calldata = EATMulticallExtended.encodePresignMulticallExtended('0x01')
      expect(calldata).toBe(
        '0x2efb614b0000000000000000000000000000000000000000000000000000000000000001f00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fbf00d2a7f6996abe9ade2747e3de45e96fb8fe12381ab659586473cb43d7550fb000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010300000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works with deadline as string', () => {
      const calldata = EATMulticallExtended.encodePresignMulticallExtended('0x01', '123')
      expect(calldata).toBe(
        '0x6cfd42de000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works with deadline as number', () => {
      const calldata = EATMulticallExtended.encodePresignMulticallExtended('0x01', 123)
      expect(calldata).toBe(
        '0x6cfd42de000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works with previous block hash', () => {
      const calldata = EATMulticallExtended.encodePresignMulticallExtended(
        '0x01',
        '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
      )
      expect(calldata).toBe(
        '0xb1c41cf4aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('encodePostsignMulticallExtended', () => {
    it('works with no validation', () => {
      const calldata = EATMulticallExtended.encodePostsignMulticallExtended(v, r, s, expiry, '0x01')
      expect(calldata).toBe('0x01')
    })

    it('works with deadline as string', () => {
      const calldata = EATMulticallExtended.encodePostsignMulticallExtended(v, r, s, expiry, '0x01', '123')
      expect(calldata).toBe(
        '0x6cfd42de000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works with deadline as number', () => {
      const calldata = EATMulticallExtended.encodePostsignMulticallExtended(v, r, s, expiry, '0x01', 123)
      expect(calldata).toBe(
        '0x6cfd42de000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works with previous block hash', () => {
      const calldata = EATMulticallExtended.encodePostsignMulticallExtended(
        v,
        r,
        s,
        expiry,
        '0x01',
        '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
      )
      expect(calldata).toBe(
        '0xb1c41cf4aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })
})
